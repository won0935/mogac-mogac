server:
  port: 64412 # 서버의 포트 번호, 위와 동일하다
  shutdown: graceful

spring:
  application:
    name: user-service # 애플리케이션 서버의 이름 , 위와 동일하다

  security:
    oauth2:
      client:
        registration:
          naver:
            client-id: XZV_4BQxsFKPalXl9GtV
            client-secret: SpXf2nkJnN
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}" # (== http://localhost:8080/login/oauth2/code/naver)
            authorization-grant-type: authorization_code
            scope: name, email, profile_image
            client-name: Naver
          google:
            client-id: 52918629712-48on58rmu4dtatok51p67cbcncipf17u.apps.googleusercontent.com
            client-secret: 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
            scope: profile, email # scope 기본값이 openid, profile, email인데 profile, email만 입력한 이유 → openid라는 scope가 있으면 OpenId Provider로 인식하기 때문이다. 이렇게 되면 OpenId Provider인 서비스와 그렇지 않은 서비스(네이버/카카오 등)로 나눠서 각각 OAuth2Service를 만들어야 한다.
          github:
            client-id: 58181e4452a0077ae734
            client-secret: 51b0aad15aa8e3245ee41c132fd85012640d6930
            scope: profile, email
          kakao:
            client-id: 291bd18002d75830b35ecbacf93cad6c
            client-secret: TbuYKwSkkz82Ydufg1B8CNhwZzIPSNXG
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}" # http://localhost:8080/login/oauth2/code/kakao
            client-authentication-method: POST
            authorization-grant-type: authorization_code
            scope: profile_nickname, profile_image, account_email
            client-name: Kakao
        provider:
          naver:
            authorization_uri: https://nid.naver.com/oauth2.0/authorize
            token_uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user_name_attribute: response
          kakao:
            authorization_uri: https://kauth.kakao.com/oauth/authorize
            token_uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user_name_attribute: id

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update

  datasource:
    url: jdbc:mysql://localhost:3306/mogac-mogac?serverTimezone=UTC&characterEncoding=UTF-8
    hikari:
      driver-class-name: com.mysql.cj.jdbc.Driver
      username: root
      password: 1234

#eureka:
#  client:
#    register-with-eureka: true  # 이번에는 해당 서비스가 클라이언트로 인식되어야 하므로 true로 해주자
#    fetch-registry: true  # 이번에는 해당 서비스가 클라이언트로 인식되어야 하므로 true로 해주자
#    service-url:
#      defaultZone: http://localhost:8761/eureka # eureka server 가 위치하고 있는 기본 주소를 적어줄 수 있다.